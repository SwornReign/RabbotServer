{"version":3,"sources":["../src/app.ts"],"sourcesContent":["\r\nimport path from 'path'\r\nimport { Gpio as gpio } from 'onoff'\r\nimport fastify from 'fastify';\r\nimport { fastifyTRPCPlugin } from '@trpc/server/adapters/fastify';\r\nimport { appRouter } from './trpc/router';\r\nimport fastifyStatic from '@fastify/static';\r\nimport { fileURLToPath } from 'url';\r\nimport { fastifyCors } from '@fastify/cors';\r\nimport fastifyPrismaClient from 'fastify-prisma-client';\r\nimport { createContext } from './trpc/context';\r\nimport { PrismaClient } from '@prisma/client';\r\n\r\n//const __filename = fileURLToPath(import.meta.url);\r\n\r\n//const __dirname = path.dirname(__filename);\r\n\r\nexport const prisma = new PrismaClient()\r\n\r\nconst server = fastify({\r\n  maxParamLength: 5000,\r\n});\r\n\r\nserver.register(fastifyPrismaClient, {});\r\n\r\nserver.register(fastifyCors, () => {\r\n  return (req: any, callback: any) => {\r\n    const corsOptions = {\r\n      // This is NOT recommended for production as it enables reflection exploits\r\n      origin: true\r\n    };\r\n\r\n    // do not include CORS headers for requests from localhost\r\n    if (/^localhost$/m.test(req.headers.origin)) {\r\n      corsOptions.origin = false\r\n    }\r\n\r\n    // callback expects two parameters: error and options\r\n    callback(null, corsOptions)\r\n  }\r\n})\r\n\r\n\r\n//use GPIO pin numbers\r\nconst stepPins = [17, 22, 27, 23];\r\n\r\n//const waterPin = new gpio(24, \"out\");\r\nconst pinNumber = stepPins.length;\r\nlet pins: gpio[] = [];\r\nconst waterTimeout = 1000;\r\n\r\n//waterPin.writeSync(1); // Set to Default\r\n\r\nlet Seq: number[][] = [];\r\nSeq[0] = [1, 0, 0, 0];\r\nSeq[1] = [1, 1, 0, 0];\r\nSeq[2] = [0, 1, 0, 0];\r\nSeq[3] = [0, 1, 1, 0];\r\nSeq[4] = [0, 0, 1, 0];\r\nSeq[5] = [0, 0, 1, 1];\r\nSeq[6] = [0, 0, 0, 1];\r\nSeq[7] = [1, 0, 0, 1];\r\nSeq[8] = [0, 0, 0, 0];\r\n\r\n\r\n// for (var i = 0; i < pinNumber; i++) {\r\n//   pins[i] = new gpio(stepPins[i], \"out\");\r\n// }\r\n\r\n\r\n\r\nvar step = async function (stepCounter: number) {\r\n  return new Promise((res) => {\r\n    for (var pin = 0; pin < 4; pin++) {\r\n      if (Seq[stepCounter][pin] != 0) {\r\n        pins[pin].writeSync(1);\r\n      } else {\r\n        pins[pin].writeSync(0);\r\n      }\r\n    }\r\n\r\n    setTimeout(res, 5);\r\n  });\r\n};\r\n\r\nconst runMotor = async () => {\r\n  for (var s = 0; s < 50; s++) {\r\n    for (var pin = 0; pin < 9; pin++) {\r\n      await step(pin);\r\n    }\r\n  }\r\n};\r\n\r\nconst runWater = async (interval: number) => {\r\n  //waterPin.writeSync(0);\r\n\r\n  await new Promise((res) =>\r\n    setTimeout(() => {\r\n      //waterPin.writeSync(1);\r\n      res(undefined);\r\n    }, interval || waterTimeout)\r\n  );\r\n};\r\n\r\n// Routes\r\n// server.register(fastifyStatic, {\r\n//   root: path.join(__dirname, \"build\"),\r\n//   prefix: \"/\",\r\n// });\r\n\r\nserver.get(\"/\", async (request, reply) => {\r\n  return { RabbotServer: true };\r\n});\r\n\r\nserver.register(fastifyTRPCPlugin, {\r\n  prefix: '/trpc',\r\n  trpcOptions: { router: appRouter, createContext },\r\n});\r\n\r\nserver.post(\"/Food\", async (request, reply) => {\r\n  await runMotor();\r\n  return { Food: true };\r\n});\r\n\r\n\r\nserver.get(\"/breed\", async (request, reply) => {\r\n  const breed = await prisma.breedType.create({\r\n                data: {\r\n                    name: 'Flemish Giant',\r\n                }\r\n            })\r\n  return breed;\r\n});\r\n\r\nserver.post(\"/Water\", async (request, reply) => {\r\n  const { interval } = request.body as { interval: number };\r\n  await runWater(interval);\r\n  //waterPin.writeSync(1);\r\n  return { Water: true };\r\n});\r\n\r\n// Run the server!\r\nconst start = async () => {\r\n  try {\r\n    await server.listen({ port: 5000, host: \"0.0.0.0\" });\r\n  } catch (err) {\r\n    server.log.error(err);\r\n    process.exit(1);\r\n  }\r\n};\r\nstart();\r\n"],"names":["fastify","fastifyTRPCPlugin","appRouter","fastifyCors","fastifyPrismaClient","createContext","PrismaClient","prisma","server","maxParamLength","register","req","callback","corsOptions","origin","test","headers","stepPins","pinNumber","length","pins","waterTimeout","Seq","step","stepCounter","Promise","res","pin","writeSync","setTimeout","runMotor","s","runWater","interval","undefined","get","request","reply","RabbotServer","prefix","trpcOptions","router","post","Food","breed","breedType","create","data","name","body","Water","start","err","listen","port","host","log","error","process","exit"],"mappings":"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"}