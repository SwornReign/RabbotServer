<<<<<<< HEAD
{"version":3,"sources":["../../../src/trpc/routes/rabbit.ts"],"sourcesContent":["import { router, publicProcedure, Models } from '../../trpc';\r\nimport { z } from 'zod';\r\nimport { _RabbitModel } from '../../zod';\r\nimport { prisma } from '../../app';\r\n\r\nconst model: Models = 'rabbit'\r\n\r\nexport const rabbitRouter = router({\r\n    create: publicProcedure\r\n        .input(_RabbitModel.omit({ id: true, birthDate: true, breedGeo: true }))\r\n        .mutation(({ input }) => {\r\n            return prisma[model].create({\r\n                data: input\r\n            })\r\n        }),\r\n    list: publicProcedure.query(() => {\r\n        return prisma[model].findMany({});\r\n    }),\r\n    getOne: publicProcedure.input(z.object({\r\n            id: z.string().uuid()\r\n        })).query(({input}) => {\r\n        return prisma[model].findFirst({\r\n            where: {\r\n                id: input.id\r\n            },\r\n            include: {\r\n                Cage: true,\r\n                BreedType: true\r\n            }\r\n        });\r\n    }),\r\n    delete: publicProcedure\r\n        .input(z.object({\r\n            id: z.string().uuid()\r\n        })).mutation(({ input }) => {\r\n            return prisma[model].delete({\r\n                where: {\r\n                    id: input.id\r\n                }\r\n            });\r\n        }),\r\n    update: publicProcedure\r\n        .input(z.object({\r\n            id: z.string().uuid().optional(),\r\n            breedTypeId: z.string().uuid().optional(),\r\n            cageId: z.string().uuid().optional(),\r\n            status: z.string().optional(),\r\n            gender: z.enum([\"Sire\", \"Dam\"]).optional(),\r\n            name: z.string().optional(),\r\n            description: z.string().optional(),\r\n            weight: z.string().optional(),\r\n        })).mutation(({ input }) => {\r\n            let rabbitId = input.id\r\n            delete input.id\r\n            return prisma[model].update({\r\n                where: {\r\n                    id: rabbitId\r\n                },\r\n                data: input\r\n            });\r\n        }),\r\n    putToCage: publicProcedure\r\n        .input(z.object({\r\n            rabbitId: z.string().uuid(),\r\n            cageId: z.string().uuid(),\r\n        })).mutation(({ input }) => {\r\n            return prisma[model].update({\r\n                where: {\r\n                    id: input.rabbitId\r\n                },\r\n                data: {\r\n                    Cage: {\r\n                        connect: {\r\n                            id: input.cageId\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }),\r\n});"],"names":["router","publicProcedure","z","_RabbitModel","prisma","model","rabbitRouter","create","input","omit","id","birthDate","breedGeo","mutation","data","list","query","findMany","getOne","object","string","uuid","findFirst","where","include","Cage","BreedType","delete","update","optional","breedTypeId","cageId","status","gender","enum","name","description","weight","rabbitId","putToCage","connect"],"mappings":"AAAA,SAASA,MAAM,EAAEC,eAAe,QAAgB,aAAa;AAC7D,SAASC,CAAC,QAAQ,MAAM;AACxB,SAASC,YAAY,QAAQ,YAAY;AACzC,SAASC,MAAM,QAAQ,YAAY;AAEnC,IAAMC,QAAgB;AAEtB,OAAO,IAAMC,eAAeN,OAAO;IAC/BO,QAAQN,gBACHO,KAAK,CAACL,aAAaM,IAAI,CAAC;QAAEC,IAAI,IAAI;QAAEC,WAAW,IAAI;QAAEC,UAAU,IAAI;IAAC,IACpEC,QAAQ,CAAC,gBAAe;YAAZL,cAAAA;QACT,OAAOJ,MAAM,CAACC,MAAM,CAACE,MAAM,CAAC;YACxBO,MAAMN;QACV;IACJ;IACJO,MAAMd,gBAAgBe,KAAK,CAAC,WAAM;QAC9B,OAAOZ,MAAM,CAACC,MAAM,CAACY,QAAQ,CAAC,CAAC;IACnC;IACAC,QAAQjB,gBAAgBO,KAAK,CAACN,EAAEiB,MAAM,CAAC;QAC/BT,IAAIR,EAAEkB,MAAM,GAAGC,IAAI;IACvB,IAAIL,KAAK,CAAC,gBAAa;YAAXR,cAAAA;QACZ,OAAOJ,MAAM,CAACC,MAAM,CAACiB,SAAS,CAAC;YAC3BC,OAAO;gBACHb,IAAIF,MAAME,EAAE;YAChB;YACAc,SAAS;gBACLC,MAAM,IAAI;gBACVC,WAAW,IAAI;YACnB;QACJ;IACJ;IACAC,QAAQ1B,gBACHO,KAAK,CAACN,EAAEiB,MAAM,CAAC;QACZT,IAAIR,EAAEkB,MAAM,GAAGC,IAAI;IACvB,IAAIR,QAAQ,CAAC,gBAAe;YAAZL,cAAAA;QACZ,OAAOJ,MAAM,CAACC,MAAM,CAACsB,MAAM,CAAC;YACxBJ,OAAO;gBACHb,IAAIF,MAAME,EAAE;YAChB;QACJ;IACJ;IACJkB,QAAQ3B,gBACHO,KAAK,CAACN,EAAEiB,MAAM,CAAC;QACZT,IAAIR,EAAEkB,MAAM,GAAGC,IAAI,GAAGQ,QAAQ;QAC9BC,aAAa5B,EAAEkB,MAAM,GAAGC,IAAI,GAAGQ,QAAQ;QACvCE,QAAQ7B,EAAEkB,MAAM,GAAGC,IAAI,GAAGQ,QAAQ;QAClCG,QAAQ9B,EAAEkB,MAAM,GAAGS,QAAQ;QAC3BI,QAAQ/B,EAAEgC,IAAI,CAAC;YAAC;YAAQ;SAAM,EAAEL,QAAQ;QACxCM,MAAMjC,EAAEkB,MAAM,GAAGS,QAAQ;QACzBO,aAAalC,EAAEkB,MAAM,GAAGS,QAAQ;QAChCQ,QAAQnC,EAAEkB,MAAM,GAAGS,QAAQ;IAC/B,IAAIhB,QAAQ,CAAC,gBAAe;YAAZL,cAAAA;QACZ,IAAI8B,WAAW9B,MAAME,EAAE;QACvB,OAAOF,MAAME,EAAE;QACf,OAAON,MAAM,CAACC,MAAM,CAACuB,MAAM,CAAC;YACxBL,OAAO;gBACHb,IAAI4B;YACR;YACAxB,MAAMN;QACV;IACJ;IACJ+B,WAAWtC,gBACNO,KAAK,CAACN,EAAEiB,MAAM,CAAC;QACZmB,UAAUpC,EAAEkB,MAAM,GAAGC,IAAI;QACzBU,QAAQ7B,EAAEkB,MAAM,GAAGC,IAAI;IAC3B,IAAIR,QAAQ,CAAC,gBAAe;YAAZL,cAAAA;QACZ,OAAOJ,MAAM,CAACC,MAAM,CAACuB,MAAM,CAAC;YACxBL,OAAO;gBACHb,IAAIF,MAAM8B,QAAQ;YACtB;YACAxB,MAAM;gBACFW,MAAM;oBACFe,SAAS;wBACL9B,IAAIF,MAAMuB,MAAM;oBACpB;gBACJ;YACJ;QACJ;IACJ;AACR,GAAG"}
=======
{"version":3,"sources":["../../../src/trpc/routes/rabbit.ts"],"sourcesContent":["import { router, publicProcedure, Models } from '../../trpc';\r\nimport { z } from 'zod';\r\nimport { _RabbitModel } from '../../zod';\r\nimport { prisma } from '../..';\r\n\r\nconst model: Models = 'rabbit'\r\n\r\nexport const rabbitRouter = router({\r\n    create: publicProcedure\r\n        .input(_RabbitModel.omit({ id: true, birthDate: true, breedGeo: true }))\r\n        .mutation(({ input }) => {\r\n            return prisma[model].create({\r\n                data: input\r\n            })\r\n        }),\r\n    list: publicProcedure.query(() => {\r\n        return prisma[model].findMany({});\r\n    }),\r\n    getOne: publicProcedure.input(z.object({\r\n            id: z.string().uuid()\r\n        })).query(({input}) => {\r\n        return prisma[model].findFirst({\r\n            where: {\r\n                id: input.id\r\n            },\r\n            include: {\r\n                Cage: true,\r\n                BreedType: true\r\n            }\r\n        });\r\n    }),\r\n    delete: publicProcedure\r\n        .input(z.object({\r\n            id: z.string().uuid()\r\n        })).mutation(({ input }) => {\r\n            return prisma[model].delete({\r\n                where: {\r\n                    id: input.id\r\n                }\r\n            });\r\n        }),\r\n    update: publicProcedure\r\n        .input(z.object({\r\n            id: z.string().uuid().optional(),\r\n            breedTypeId: z.string().uuid().optional(),\r\n            cageId: z.string().uuid().optional(),\r\n            status: z.string().optional(),\r\n            gender: z.enum([\"Sire\", \"Dam\"]).optional(),\r\n            name: z.string().optional(),\r\n            description: z.string().optional(),\r\n            weight: z.string().optional(),\r\n        })).mutation(({ input }) => {\r\n            let rabbitId = input.id\r\n            delete input.id\r\n            return prisma[model].update({\r\n                where: {\r\n                    id: rabbitId\r\n                },\r\n                data: input\r\n            });\r\n        }),\r\n    putToCage: publicProcedure\r\n        .input(z.object({\r\n            rabbitId: z.string().uuid(),\r\n            cageId: z.string().uuid(),\r\n        })).mutation(({ input }) => {\r\n            return prisma[model].update({\r\n                where: {\r\n                    id: input.rabbitId\r\n                },\r\n                data: {\r\n                    Cage: {\r\n                        connect: {\r\n                            id: input.cageId\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }),\r\n});"],"names":["router","publicProcedure","z","_RabbitModel","prisma","model","rabbitRouter","create","input","omit","id","birthDate","breedGeo","mutation","data","list","query","findMany","getOne","object","string","uuid","findFirst","where","include","Cage","BreedType","delete","update","optional","breedTypeId","cageId","status","gender","enum","name","description","weight","rabbitId","putToCage","connect"],"mappings":"AAAA,SAASA,MAAM,EAAEC,eAAe,QAAgB,aAAa;AAC7D,SAASC,CAAC,QAAQ,MAAM;AACxB,SAASC,YAAY,QAAQ,YAAY;AACzC,SAASC,MAAM,QAAQ,QAAQ;AAE/B,IAAMC,QAAgB;AAEtB,OAAO,IAAMC,eAAeN,OAAO;IAC/BO,QAAQN,gBACHO,KAAK,CAACL,aAAaM,IAAI,CAAC;QAAEC,IAAI,IAAI;QAAEC,WAAW,IAAI;QAAEC,UAAU,IAAI;IAAC,IACpEC,QAAQ,CAAC,gBAAe;YAAZL,cAAAA;QACT,OAAOJ,MAAM,CAACC,MAAM,CAACE,MAAM,CAAC;YACxBO,MAAMN;QACV;IACJ;IACJO,MAAMd,gBAAgBe,KAAK,CAAC,WAAM;QAC9B,OAAOZ,MAAM,CAACC,MAAM,CAACY,QAAQ,CAAC,CAAC;IACnC;IACAC,QAAQjB,gBAAgBO,KAAK,CAACN,EAAEiB,MAAM,CAAC;QAC/BT,IAAIR,EAAEkB,MAAM,GAAGC,IAAI;IACvB,IAAIL,KAAK,CAAC,gBAAa;YAAXR,cAAAA;QACZ,OAAOJ,MAAM,CAACC,MAAM,CAACiB,SAAS,CAAC;YAC3BC,OAAO;gBACHb,IAAIF,MAAME,EAAE;YAChB;YACAc,SAAS;gBACLC,MAAM,IAAI;gBACVC,WAAW,IAAI;YACnB;QACJ;IACJ;IACAC,QAAQ1B,gBACHO,KAAK,CAACN,EAAEiB,MAAM,CAAC;QACZT,IAAIR,EAAEkB,MAAM,GAAGC,IAAI;IACvB,IAAIR,QAAQ,CAAC,gBAAe;YAAZL,cAAAA;QACZ,OAAOJ,MAAM,CAACC,MAAM,CAACsB,MAAM,CAAC;YACxBJ,OAAO;gBACHb,IAAIF,MAAME,EAAE;YAChB;QACJ;IACJ;IACJkB,QAAQ3B,gBACHO,KAAK,CAACN,EAAEiB,MAAM,CAAC;QACZT,IAAIR,EAAEkB,MAAM,GAAGC,IAAI,GAAGQ,QAAQ;QAC9BC,aAAa5B,EAAEkB,MAAM,GAAGC,IAAI,GAAGQ,QAAQ;QACvCE,QAAQ7B,EAAEkB,MAAM,GAAGC,IAAI,GAAGQ,QAAQ;QAClCG,QAAQ9B,EAAEkB,MAAM,GAAGS,QAAQ;QAC3BI,QAAQ/B,EAAEgC,IAAI,CAAC;YAAC;YAAQ;SAAM,EAAEL,QAAQ;QACxCM,MAAMjC,EAAEkB,MAAM,GAAGS,QAAQ;QACzBO,aAAalC,EAAEkB,MAAM,GAAGS,QAAQ;QAChCQ,QAAQnC,EAAEkB,MAAM,GAAGS,QAAQ;IAC/B,IAAIhB,QAAQ,CAAC,gBAAe;YAAZL,cAAAA;QACZ,IAAI8B,WAAW9B,MAAME,EAAE;QACvB,OAAOF,MAAME,EAAE;QACf,OAAON,MAAM,CAACC,MAAM,CAACuB,MAAM,CAAC;YACxBL,OAAO;gBACHb,IAAI4B;YACR;YACAxB,MAAMN;QACV;IACJ;IACJ+B,WAAWtC,gBACNO,KAAK,CAACN,EAAEiB,MAAM,CAAC;QACZmB,UAAUpC,EAAEkB,MAAM,GAAGC,IAAI;QACzBU,QAAQ7B,EAAEkB,MAAM,GAAGC,IAAI;IAC3B,IAAIR,QAAQ,CAAC,gBAAe;YAAZL,cAAAA;QACZ,OAAOJ,MAAM,CAACC,MAAM,CAACuB,MAAM,CAAC;YACxBL,OAAO;gBACHb,IAAIF,MAAM8B,QAAQ;YACtB;YACAxB,MAAM;gBACFW,MAAM;oBACFe,SAAS;wBACL9B,IAAIF,MAAMuB,MAAM;oBACpB;gBACJ;YACJ;QACJ;IACJ;AACR,GAAG"}
>>>>>>> e0abaca9e7145c6ed4bc11f4e0ffb49245fb4e5a
