{"version":3,"sources":["../../../src/trpc/routes/cage.ts"],"sourcesContent":["import { router, publicProcedure, Models } from '../../trpc';\r\nimport { z } from 'zod';\r\nimport { _CageModel } from '../../zod';\r\nimport { prisma } from '../../app';\r\nimport cron from 'node-cron';\r\nimport { runMotor } from '../../GPIO/funtions';\r\nimport dayjs from 'dayjs';\r\n\r\nconst model: Models = 'cage'\r\n\r\nlet cronFeed: cron.ScheduledTask[] = []\r\n\r\nexport const cageRouter = router({\r\n    create: publicProcedure\r\n        .input(_CageModel.omit({ id: true, updateAt: true, createdAt: true }))\r\n        .mutation(({ input }) => {\r\n            return prisma[model].create({\r\n                data: input\r\n            })\r\n        }),\r\n    list: publicProcedure.query(() => {\r\n        return prisma[model].findMany({\r\n           include: {\r\n            Rabbit: true\r\n           } \r\n        });\r\n    }),\r\n    getOne: publicProcedure.input(z.object({\r\n            id: z.string().uuid()\r\n        })).query(({input}) => {\r\n        return prisma[model].findFirst({\r\n            where: {\r\n                id: input.id\r\n            },\r\n            include: {\r\n                Rabbit: true,\r\n            }\r\n        });\r\n    }),\r\n    delete: publicProcedure\r\n        .input(z.object({\r\n            id: z.string().uuid()\r\n        })).mutation(({ input }) => {\r\n            return prisma[model].delete({\r\n                where: {\r\n                    id: input.id\r\n                }\r\n            });\r\n        }),\r\n    update: publicProcedure\r\n        .input(z.object({\r\n            id: z.string().uuid().optional(),\r\n            name: z.string().optional(),\r\n            description: z.string().optional(),\r\n            cageType: z.enum([\"Breeder\", \"Pen\"]).optional(),\r\n            AutoFeed: z.boolean().optional(),\r\n        })).mutation(async ({ input }) => {\r\n            let cageId = input.id\r\n            delete input.id\r\n\r\n            const data = await prisma[model].update({\r\n                where: {\r\n                    id: cageId\r\n                },\r\n                data: input\r\n            });\r\n\r\n            const { feedTime } = data\r\n\r\n            if (input.AutoFeed && feedTime && feedTime.length) {\r\n\r\n                feedTime.forEach((i) => {\r\n\r\n                    const hour = dayjs(i).get('hour')\r\n\r\n                    const minute = dayjs(i).get('minute')\r\n\r\n                    const c = cron.schedule(`${minute} ${hour} * * *`, async () => {\r\n                                await runMotor()\r\n                        })\r\n\r\n                        c.start()\r\n                   \r\n                    cronFeed.push(c)\r\n                })\r\n\r\n\r\n                \r\n                 \r\n            } else {\r\n                cronFeed.forEach((i) => {\r\n                    i.stop()\r\n                })\r\n            }\r\n\r\n            return data\r\n             \r\n        }),\r\n    RabbitToCage: publicProcedure\r\n        .input(z.object({\r\n            rabbitId: z.string().uuid(),\r\n            cageId: z.string().uuid(),\r\n        })).mutation(({ input }) => {\r\n            return prisma[model].update({\r\n                where: {\r\n                    id: input.cageId\r\n                },\r\n                data: {\r\n                    Rabbit: {\r\n                        connect: {\r\n                            id: input.rabbitId\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }),\r\n    listCage: publicProcedure\r\n    .input(z.object({\r\n        type: z.enum([\"Breeder\", \"Pen\"])\r\n    }))\r\n    .query(({input: { type }}) => {\r\n        return prisma.$transaction(async (ctx) => {\r\n            const cage = await ctx.cage.findMany({\r\n                where: {\r\n                    cageType: type\r\n                },\r\n                include: {\r\n                    Rabbit: true\r\n                }\r\n            })\r\n\r\n            const result = cage.filter((i) => Boolean(i.Rabbit.length))\r\n\r\n            return result\r\n        })\r\n    }),\r\n})"],"names":["router","publicProcedure","z","_CageModel","prisma","cron","runMotor","dayjs","model","cronFeed","cageRouter","create","input","omit","id","updateAt","createdAt","mutation","data","list","query","findMany","include","Rabbit","getOne","object","string","uuid","findFirst","where","delete","update","optional","name","description","cageType","enum","AutoFeed","boolean","cageId","feedTime","length","forEach","i","hour","get","minute","c","schedule","start","push","stop","RabbitToCage","rabbitId","connect","listCage","type","$transaction","ctx","cage","result","filter","Boolean"],"mappings":"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"}