{"version":3,"sources":["../../src/zod/rabbit.ts"],"sourcesContent":["import * as z from \"zod\"\nimport { RabbitGender } from \"@prisma/client\"\nimport { CompleteBreedType, BreedTypeModel, CompleteCage, CageModel, CompleteBreedRecord, BreedRecordModel } from \"./index\"\n\n// Helper schema for JSON fields\ntype Literal = boolean | number | string\ntype Json = Literal | { [key: string]: Json } | Json[]\nconst literalSchema = z.union([z.string(), z.number(), z.boolean()])\nconst jsonSchema: z.ZodSchema<Json> = z.lazy(() => z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)]))\n\nexport const _RabbitModel = z.object({\n  id: z.string(),\n  name: z.string(),\n  weight: z.string(),\n  gender: z.nativeEnum(RabbitGender),\n  description: z.string().nullish(),\n  breedTypeId: z.string(),\n  birthDate: z.date(),\n  deceaseDate: z.date().nullish(),\n  lastBreedDate: z.date().nullish(),\n  breedGeo: jsonSchema,\n  cageId: z.string().nullish(),\n  motherId: z.string().nullish(),\n  fatherId: z.string().nullish(),\n  kittenCageId: z.string().nullish(),\n  status: z.string().nullish(),\n  statusDate: z.date().nullish(),\n})\n\nexport interface CompleteRabbit extends z.infer<typeof _RabbitModel> {\n  BreedType: CompleteBreedType\n  Cage?: CompleteCage | null\n  Mother?: CompleteRabbit | null\n  Father?: CompleteRabbit | null\n  RabbitMother: CompleteRabbit[]\n  RabbitFather: CompleteRabbit[]\n  SireBreedRecord: CompleteBreedRecord[]\n  DamBreedRecord: CompleteBreedRecord[]\n  CageKiiten?: CompleteCage | null\n}\n\n/**\n * RabbitModel contains all relations on your model in addition to the scalars\n *\n * NOTE: Lazy required in case of potential circular dependencies within schema\n */\nexport const RabbitModel: z.ZodSchema<CompleteRabbit> = z.lazy(() => _RabbitModel.extend({\n  BreedType: BreedTypeModel,\n  Cage: CageModel.nullish(),\n  Mother: RabbitModel.nullish(),\n  Father: RabbitModel.nullish(),\n  RabbitMother: RabbitModel.array(),\n  RabbitFather: RabbitModel.array(),\n  SireBreedRecord: BreedRecordModel.array(),\n  DamBreedRecord: BreedRecordModel.array(),\n  CageKiiten: CageModel.nullish(),\n}))\n"],"names":["z","RabbitGender","BreedTypeModel","CageModel","BreedRecordModel","literalSchema","union","string","number","boolean","jsonSchema","lazy","array","record","_RabbitModel","object","id","name","weight","gender","nativeEnum","description","nullish","breedTypeId","birthDate","date","deceaseDate","lastBreedDate","breedGeo","cageId","motherId","fatherId","kittenCageId","status","statusDate","RabbitModel","extend","BreedType","Cage","Mother","Father","RabbitMother","RabbitFather","SireBreedRecord","DamBreedRecord","CageKiiten"],"mappings":"AAAA,YAAYA,OAAO,MAAK;AACxB,SAASC,YAAY,QAAQ,iBAAgB;AAC7C,SAA4BC,cAAc,EAAgBC,SAAS,EAAuBC,gBAAgB,QAAQ,UAAS;AAK3H,IAAMC,gBAAgBL,EAAEM,KAAK,CAAC;IAACN,EAAEO,MAAM;IAAIP,EAAEQ,MAAM;IAAIR,EAAES,OAAO;CAAG;AACnE,IAAMC,aAAgCV,EAAEW,IAAI,CAAC;WAAMX,EAAEM,KAAK,CAAC;QAACD;QAAeL,EAAEY,KAAK,CAACF;QAAaV,EAAEa,MAAM,CAACH;KAAY;;AAErH,OAAO,IAAMI,eAAed,EAAEe,MAAM,CAAC;IACnCC,IAAIhB,EAAEO,MAAM;IACZU,MAAMjB,EAAEO,MAAM;IACdW,QAAQlB,EAAEO,MAAM;IAChBY,QAAQnB,EAAEoB,UAAU,CAACnB;IACrBoB,aAAarB,EAAEO,MAAM,GAAGe,OAAO;IAC/BC,aAAavB,EAAEO,MAAM;IACrBiB,WAAWxB,EAAEyB,IAAI;IACjBC,aAAa1B,EAAEyB,IAAI,GAAGH,OAAO;IAC7BK,eAAe3B,EAAEyB,IAAI,GAAGH,OAAO;IAC/BM,UAAUlB;IACVmB,QAAQ7B,EAAEO,MAAM,GAAGe,OAAO;IAC1BQ,UAAU9B,EAAEO,MAAM,GAAGe,OAAO;IAC5BS,UAAU/B,EAAEO,MAAM,GAAGe,OAAO;IAC5BU,cAAchC,EAAEO,MAAM,GAAGe,OAAO;IAChCW,QAAQjC,EAAEO,MAAM,GAAGe,OAAO;IAC1BY,YAAYlC,EAAEyB,IAAI,GAAGH,OAAO;AAC9B,GAAE;AAcF;;;;CAIC,GACD,OAAO,IAAMa,cAA2CnC,EAAEW,IAAI,CAAC;WAAMG,aAAasB,MAAM,CAAC;QACvFC,WAAWnC;QACXoC,MAAMnC,UAAUmB,OAAO;QACvBiB,QAAQJ,YAAYb,OAAO;QAC3BkB,QAAQL,YAAYb,OAAO;QAC3BmB,cAAcN,YAAYvB,KAAK;QAC/B8B,cAAcP,YAAYvB,KAAK;QAC/B+B,iBAAiBvC,iBAAiBQ,KAAK;QACvCgC,gBAAgBxC,iBAAiBQ,KAAK;QACtCiC,YAAY1C,UAAUmB,OAAO;IAC/B;GAAG"}